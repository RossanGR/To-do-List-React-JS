{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\guilherme.rossan\\\\Desktop\\\\react\\\\todolist\\\\src\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport Header from './components/Header';\nimport TaskDetails from './components/TaskDetails';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [task, setTask] = useState([{\n    id: \"1\",\n    title: \"Estudar Programação\",\n    completed: false\n  }, {\n    id: \"2\",\n    title: \"Ler Livros\",\n    completed: true\n  }]); // Chamando uma API\n\n  useEffect(() => {\n    const fecthTasks = async () => {\n      const {\n        data\n      } = await axios.get('https://jsonplaceholder.cypress.io/todos?_limit=10');\n      setTask(data);\n    };\n\n    fecthTasks();\n  }, []);\n\n  const handdleTaskClick = taskId => {\n    const newTasks = task.map(task => {\n      if (task.id == taskId) return { ...task,\n        completed: !task.completed\n      };\n      return task;\n    });\n    setTask(newTasks);\n  };\n\n  const hangleTaskAddition = taskTittle => {\n    const newTasks = [...task, {\n      title: taskTittle,\n      id: uuidv4(),\n      completed: false\n    }];\n    setTask(newTasks);\n  };\n\n  const handdleRemoveTask = taskId => {\n    // Primeiro modo encontrar a posição e depois excluir no método splice e atualizar o state\n    // const position = task.findIndex(x=>x.id == taskId);\n    // const newTask = [...task];\n    // newTask.splice(position,1);\n    // Segundo modo, fazer um filtro passando a igualdade , se for diferente do que está procurando ele vai mostrar todos. \n    const newTask = task.filter(task => task.id != taskId);\n    setTask(newTask);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        render: () => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(AddTask, {\n            hangleTaskAddition: hangleTaskAddition\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tasks, {\n            tasks: task,\n            handdleTaskClick: handdleTaskClick,\n            handdleRemoveTask: handdleRemoveTask\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/:taskTitle\",\n        exact: true,\n        component: TaskDetails\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Rsk+eUPlWu8NwLouoduP3W4xWtg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/guilherme.rossan/Desktop/react/todolist/src/App.jsx"],"names":["React","useEffect","useState","axios","v4","uuidv4","BrowserRouter","Router","Route","Tasks","AddTask","Header","TaskDetails","App","task","setTask","id","title","completed","fecthTasks","data","get","handdleTaskClick","taskId","newTasks","map","hangleTaskAddition","taskTittle","handdleRemoveTask","newTask","filter"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\nimport {v4 as uuidv4} from 'uuid';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport Header from './components/Header';\nimport TaskDetails from './components/TaskDetails';\n\nimport './App.css';\n\n\nconst App = () => {\n    const [task,setTask] = useState([\n      {\n        id: \"1\",\n        title: \"Estudar Programação\",\n        completed: false,\n      },\n      {\n        id: \"2\",\n        title: \"Ler Livros\",\n        completed: true,\n      }\n    ]);\n\n    // Chamando uma API\n    useEffect(()=>{\n        const fecthTasks = async () =>{\n          const {data} = await axios.get('https://jsonplaceholder.cypress.io/todos?_limit=10');\n          setTask(data);\n        }\n        fecthTasks();\n    },[])\n\n    \n    const handdleTaskClick = (taskId) =>{\n      const newTasks = task.map(task => {\n        if(task.id == taskId) return{... task, completed: !task.completed}\n\n        return task;\n      })\n\n      setTask(newTasks);\n    }\n\n    const hangleTaskAddition = (taskTittle)  =>{\n        const newTasks = [...task,{\n          title: taskTittle,\n          id: uuidv4(),\n          completed:false,\n        }]\n\n        setTask(newTasks);\n    }\n\n    const handdleRemoveTask = (taskId) =>{\n      // Primeiro modo encontrar a posição e depois excluir no método splice e atualizar o state\n        // const position = task.findIndex(x=>x.id == taskId);\n        // const newTask = [...task];\n        // newTask.splice(position,1);\n        \n      // Segundo modo, fazer um filtro passando a igualdade , se for diferente do que está procurando ele vai mostrar todos. \n        const newTask = task.filter(task=> task.id != taskId);\n\n        setTask(newTask);\n\n    }\n\n  return(\n    <Router>\n      <div className=\"container\">\n        <Header/>\n        <Route path=\"/\" exact render={() =>(\n          <>\n            <AddTask hangleTaskAddition={hangleTaskAddition}/>\n            <Tasks tasks={task} handdleTaskClick={handdleTaskClick} handdleRemoveTask={handdleRemoveTask}/>\n          </>\n        )}/>\n\n        <Route path=\"/:taskTitle\" exact component={TaskDetails}/>\n        \n      </div>\n    </Router>\n  )\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}