{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\guilherme.rossan\\\\Desktop\\\\react\\\\todolist\\\\src\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react'; // Consumir API\n\nimport axios from 'axios'; // Gerador de id\n\nimport { v4 as uuidv4 } from 'uuid'; // Rotas\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport Header from './components/Header';\nimport TaskDetails from './components/TaskDetails';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [task, setTask] = useState([{\n    id: \"1\",\n    title: \"Estudar Programação\",\n    completed: false\n  }, {\n    id: \"2\",\n    title: \"Ler Livros\",\n    completed: true\n  }]);\n  const [inputData, setinputData] = useState('');\n  const [editar, setEditar] = useState({\n    shouldEdit: false,\n    taskID: 0\n  }); // Chamando uma API\n  // useEffect(()=>{\n  //     const fecthTasks = async () =>{\n  //       const {data} = await axios.get('https://jsonplaceholder.cypress.io/todos?_limit=10');\n  //       setTask(data);\n  //     }\n  //     fecthTasks();\n  // },[])\n  // Alterando o completed do state task\n\n  const handdleTaskClick = taskId => {\n    const newTasks = task.map(task => {\n      if (task.id === taskId) return { ...task,\n        completed: !task.completed\n      };\n      return task;\n    });\n    setTask(newTasks);\n  }; // Adicionando itens no state task\n\n\n  const hangleTaskAddition = taskTittle => {\n    const newTasks = [...task, {\n      title: taskTittle,\n      id: uuidv4(),\n      completed: false\n    }];\n    setTask(newTasks);\n  }; // Removendo itens do state task\n\n\n  const handdleRemoveTask = taskId => {\n    // Primeiro modo encontrar a posição e depois excluir no método splice e atualizar o state\n    // const position = task.findIndex(x=>x.id == taskId);\n    // const newTask = [...task];\n    // newTask.splice(position,1);\n    // Segundo modo, fazer um filtro passando a igualdade , se for diferente do que está procurando ele vai mostrar todos. \n    const newTask = task.filter(task => task.id !== taskId);\n    setTask(newTask);\n  }; // Editar\n\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        render: () => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(AddTask, {\n            hangleTaskAddition: hangleTaskAddition,\n            task: task,\n            setTask: setTask,\n            inputData: inputData,\n            setinputData: setinputData,\n            editar: editar,\n            setEditar: setEditar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tasks, {\n            setinputData: setinputData,\n            editar: editar,\n            setEditar: setEditar,\n            tasks: task,\n            handdleTaskClick: handdleTaskClick,\n            handdleRemoveTask: handdleRemoveTask\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/:taskTitle\",\n        exact: true,\n        component: TaskDetails\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"XiOFmyR800rEGbltCVoQFeyGARc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/guilherme.rossan/Desktop/react/todolist/src/App.jsx"],"names":["React","useEffect","useState","axios","v4","uuidv4","BrowserRouter","Router","Route","Tasks","AddTask","Header","TaskDetails","App","task","setTask","id","title","completed","inputData","setinputData","editar","setEditar","shouldEdit","taskID","handdleTaskClick","taskId","newTasks","map","hangleTaskAddition","taskTittle","handdleRemoveTask","newTask","filter"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC,C,CACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAAQC,EAAE,IAAIC,MAAd,QAA2B,MAA3B,C,CACA;;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,QAA+C,kBAA/C;AAEA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,OAAO,WAAP;;;;AAGA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACd,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBb,QAAQ,CAAC,CAC9B;AACEc,IAAAA,EAAE,EAAE,GADN;AAEEC,IAAAA,KAAK,EAAE,qBAFT;AAGEC,IAAAA,SAAS,EAAE;AAHb,GAD8B,EAM9B;AACEF,IAAAA,EAAE,EAAE,GADN;AAEEC,IAAAA,KAAK,EAAE,YAFT;AAGEC,IAAAA,SAAS,EAAE;AAHb,GAN8B,CAAD,CAA/B;AAaA,QAAK,CAACC,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,EAAD,CAAzC;AAEA,QAAM,CAACmB,MAAD,EAASC,SAAT,IAAsBpB,QAAQ,CAAC;AACnCqB,IAAAA,UAAU,EAAG,KADsB;AAEnCC,IAAAA,MAAM,EAAG;AAF0B,GAAD,CAApC,CAhBc,CAqBd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,QAAMC,gBAAgB,GAAIC,MAAD,IAAW;AAClC,UAAMC,QAAQ,GAAGb,IAAI,CAACc,GAAL,CAASd,IAAI,IAAI;AAChC,UAAGA,IAAI,CAACE,EAAL,KAAYU,MAAf,EAAuB,OAAM,EAAC,GAAIZ,IAAL;AAAWI,QAAAA,SAAS,EAAE,CAACJ,IAAI,CAACI;AAA5B,OAAN;AAEvB,aAAOJ,IAAP;AACD,KAJgB,CAAjB;AAMAC,IAAAA,OAAO,CAACY,QAAD,CAAP;AACD,GARD,CA/Bc,CA0Cd;;;AACA,QAAME,kBAAkB,GAAIC,UAAD,IAAgB;AACvC,UAAMH,QAAQ,GAAG,CAAC,GAAGb,IAAJ,EAAS;AACxBG,MAAAA,KAAK,EAAEa,UADiB;AAExBd,MAAAA,EAAE,EAAEX,MAAM,EAFc;AAGxBa,MAAAA,SAAS,EAAC;AAHc,KAAT,CAAjB;AAKAH,IAAAA,OAAO,CAACY,QAAD,CAAP;AACH,GAPD,CA3Cc,CAoDd;;;AACA,QAAMI,iBAAiB,GAAIL,MAAD,IAAW;AACnC;AACE;AACA;AACA;AAEF;AACE,UAAMM,OAAO,GAAGlB,IAAI,CAACmB,MAAL,CAAYnB,IAAI,IAAGA,IAAI,CAACE,EAAL,KAAYU,MAA/B,CAAhB;AAEAX,IAAAA,OAAO,CAACiB,OAAD,CAAP;AAEH,GAXD,CArDc,CAkEd;;;AAKF,sBACE,QAAC,MAAD;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,GAAZ;AAAgB,QAAA,KAAK,MAArB;AAAsB,QAAA,MAAM,EAAE,mBAC5B;AAAA,kCACE,QAAC,OAAD;AAAS,YAAA,kBAAkB,EAAEH,kBAA7B;AAAiD,YAAA,IAAI,EAAEf,IAAvD;AAA6D,YAAA,OAAO,EAAEC,OAAtE;AAA+E,YAAA,SAAS,EAAEI,SAA1F;AAAqG,YAAA,YAAY,EAAEC,YAAnH;AAAiI,YAAA,MAAM,EAAEC,MAAzI;AAAiJ,YAAA,SAAS,EAAEC;AAA5J;AAAA;AAAA;AAAA;AAAA,kBADF,eAGE,QAAC,KAAD;AAAO,YAAA,YAAY,EAAEF,YAArB;AAAmC,YAAA,MAAM,EAAEC,MAA3C;AAAmD,YAAA,SAAS,EAAEC,SAA9D;AAAyE,YAAA,KAAK,EAAER,IAAhF;AAAsF,YAAA,gBAAgB,EAAEW,gBAAxG;AAA0H,YAAA,iBAAiB,EAAEM;AAA7I;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF,eAWE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAA0B,QAAA,KAAK,MAA/B;AAAgC,QAAA,SAAS,EAAEnB;AAA3C;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAzFD;;GAAMC,G;;KAAAA,G;AA2FN,eAAeA,GAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\n// Consumir API\nimport axios from 'axios';\n// Gerador de id\nimport {v4 as uuidv4} from 'uuid';\n// Rotas\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport Header from './components/Header';\nimport TaskDetails from './components/TaskDetails';\n\nimport './App.css';\n\n\nconst App = () => {\n    const [task,setTask] = useState([\n      {\n        id: \"1\",\n        title: \"Estudar Programação\",\n        completed: false,\n      },\n      {\n        id: \"2\",\n        title: \"Ler Livros\",\n        completed: true,\n      }\n    ]);\n\n    const[inputData, setinputData] = useState('');\n\n    const [editar, setEditar] = useState({\n      shouldEdit : false,\n      taskID : 0 \n    });\n    \n    // Chamando uma API\n    // useEffect(()=>{\n    //     const fecthTasks = async () =>{\n    //       const {data} = await axios.get('https://jsonplaceholder.cypress.io/todos?_limit=10');\n    //       setTask(data);\n    //     }\n    //     fecthTasks();\n    // },[])\n\n    // Alterando o completed do state task\n    const handdleTaskClick = (taskId) =>{\n      const newTasks = task.map(task => {\n        if(task.id === taskId) return{... task, completed: !task.completed}\n\n        return task;\n      })\n\n      setTask(newTasks);\n    }\n\n  \n    // Adicionando itens no state task\n    const hangleTaskAddition = (taskTittle)  =>{\n        const newTasks = [...task,{\n          title: taskTittle,\n          id: uuidv4(),\n          completed:false,\n        }]\n        setTask(newTasks);\n    }\n\n    // Removendo itens do state task\n    const handdleRemoveTask = (taskId) =>{\n      // Primeiro modo encontrar a posição e depois excluir no método splice e atualizar o state\n        // const position = task.findIndex(x=>x.id == taskId);\n        // const newTask = [...task];\n        // newTask.splice(position,1);\n        \n      // Segundo modo, fazer um filtro passando a igualdade , se for diferente do que está procurando ele vai mostrar todos. \n        const newTask = task.filter(task=> task.id !== taskId);\n\n        setTask(newTask);\n\n    }\n\n    // Editar\n \n   \n \n\n  return(\n    <Router>\n      <div className=\"container\">\n        <Header/>\n        <Route path=\"/\" exact render={() =>(\n          <>\n            <AddTask hangleTaskAddition={hangleTaskAddition} task={task} setTask={setTask} inputData={inputData} setinputData={setinputData} editar={editar} setEditar={setEditar}/>\n\n            <Tasks setinputData={setinputData} editar={editar} setEditar={setEditar} tasks={task} handdleTaskClick={handdleTaskClick} handdleRemoveTask={handdleRemoveTask}  />\n          \n          </>\n        )}/>\n\n        <Route path=\"/:taskTitle\" exact component={TaskDetails}/>\n        \n      </div>\n    </Router>\n  )\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}